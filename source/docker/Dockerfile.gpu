# Multi-stage Dockerfile cho chế độ GPU với CUDA support và Flask
FROM python:3.10-slim

# Thiết lập biến môi trường
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1

# Cài đặt Python và các dependencies hệ thống
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    libopenblas-dev \
    liblapack-dev \
    libx11-dev \
    libgtk-3-dev \
    libboost-python-dev \
    libboost-system-dev \
    libboost-thread-dev \
    wget \
    curl \
    git \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Thiết lập thư mục làm việc
WORKDIR /app

# Clone YOLOv7 repository
RUN git clone https://github.com/WongKinYiu/yolov7.git yolov7

# Copy requirements files trước để tận dụng Docker layer caching
COPY requirements.txt ./

# Cài đặt PyTorch với CUDA support
RUN pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

# Cài đặt protobuf trước để tránh xung đột
RUN pip install --no-cache-dir protobuf==3.20.3

# Cài đặt TensorFlow với phiên bản ổn định và keras
RUN pip install --no-cache-dir \
    tensorflow==2.13.0 \
    keras==2.13.1

# Cài đặt core dependencies (ít thay đổi nhất)
RUN pip install --no-cache-dir -r requirements.txt

# Tạo các thư mục cần thiết
RUN mkdir -p /app/data/raw_images \
    /app/data/labels \
    /app/models/yolov7 \
    /app/models/face_embeddings \
    /app/models/trained \
    /app/temp \
    /app/logs

# Tải YOLOv7 weights (nếu chưa có)
RUN if [ ! -f /app/models/yolov7/yolov7.pt ]; then \
    wget -O /app/models/yolov7/yolov7.pt https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7.pt; \
    fi

# Copy source code (chỉ những file cần thiết)
COPY app.py ./
COPY config/ ./config/
COPY core/ ./core/
COPY api/ ./api/
COPY utils/ ./utils/
COPY data/yolo_dataset/ ./data/yolo_dataset/
COPY models/pretrained/ ./models/pretrained/

# Expose port
EXPOSE 5000

# Thiết lập biến môi trường
ENV PYTHONPATH=/app
ENV DEVICE=gpu
ENV CUDA_VISIBLE_DEVICES=0
ENV FLASK_APP=app.py
ENV FLASK_ENV=production
ENV TF_CPP_MIN_LOG_LEVEL=2

# MongoDB environment variables
ENV MONGODB_URI=mongodb://mongodb:27017/face_recognition
ENV MONGODB_HOST=mongodb
ENV MONGODB_PORT=27017
ENV MONGODB_DATABASE=face_recognition

# Command mặc định
CMD ["python", "app.py"]

# Development stage
FROM python:3.10-slim as development

# Cài đặt dev dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy source code (chỉ những file cần thiết)
COPY app.py ./
COPY config/ ./config/
COPY core/ ./core/
COPY api/ ./api/
COPY utils/ ./utils/
COPY data/yolo_dataset/ ./data/yolo_dataset/
COPY models/pretrained/ ./models/pretrained/

# Expose port
EXPOSE 5000

# Thiết lập biến môi trường cho development
ENV PYTHONPATH=/app
ENV DEVICE=gpu
ENV CUDA_VISIBLE_DEVICES=0
ENV FLASK_APP=app.py
ENV FLASK_ENV=development
ENV TF_CPP_MIN_LOG_LEVEL=2

# MongoDB environment variables
ENV MONGODB_URI=mongodb://mongodb:27017/face_recognition
ENV MONGODB_HOST=mongodb
ENV MONGODB_PORT=27017
ENV MONGODB_DATABASE=face_recognition

# Command cho development với auto-reload
CMD ["python3", "-m", "flask", "run", "--host=0.0.0.0", "--port=5000", "--reload"] 