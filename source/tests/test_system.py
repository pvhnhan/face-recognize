"""
Script test h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t
Ki·ªÉm tra c√°c th√†nh ph·∫ßn ch√≠nh v·ªõi YOLOv7 ch√≠nh th·ª©c
"""

import sys
import os
from pathlib import Path
import logging

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import c√°c module
sys.path.append(str(Path(__file__).parent.parent))

from config.config import YOLOV7_CONFIG, MODEL_CONFIG, DATA_CONFIG
from utils.data_processor import DataProcessor
from utils.face_utils import FaceProcessor
from utils.image_utils import ImageProcessor

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_yolov7_availability():
    """Test YOLOv7 repository c√≥ s·∫µn kh√¥ng"""
    print("üîç Ki·ªÉm tra YOLOv7 repository...")
    
    yolov7_path = YOLOV7_CONFIG['repo_path']
    
    if not yolov7_path.exists():
        print("‚ùå YOLOv7 repository kh√¥ng t·ªìn t·∫°i")
        return False
    
    # Ki·ªÉm tra c√°c file c·∫ßn thi·∫øt
    required_files = YOLOV7_CONFIG['required_files']
    missing_files = []
    
    for file_path in required_files:
        full_path = yolov7_path / file_path
        if not full_path.exists():
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå Thi·∫øu c√°c file YOLOv7: {missing_files}")
        return False
    
    print("‚úÖ YOLOv7 repository ƒë√£ s·∫µn s√†ng")
    return True

def test_config():
    """Test c·∫•u h√¨nh h·ªá th·ªëng"""
    print("üîç Ki·ªÉm tra c·∫•u h√¨nh h·ªá th·ªëng...")
    
    # Ki·ªÉm tra c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
    required_dirs = [
        DATA_CONFIG['raw_images_dir'],
        DATA_CONFIG['yolo_dataset_dir'],
        MODEL_CONFIG['face_embeddings_dir'],
        Path('models/pretrained'),
        Path('models/trained'),
        Path('logs'),
        Path('temp'),
        Path('outputs')
    ]
    
    missing_dirs = []
    for dir_path in required_dirs:
        if not dir_path.exists():
            missing_dirs.append(str(dir_path))
    
    if missing_dirs:
        print(f"‚ùå Thi·∫øu c√°c th∆∞ m·ª•c: {missing_dirs}")
        return False
    
    print("‚úÖ C·∫•u h√¨nh h·ªá th·ªëng OK")
    return True

def test_data_processor():
    """Test DataProcessor"""
    print("üîç Ki·ªÉm tra DataProcessor...")
    
    try:
        data_processor = DataProcessor()
        
        # Test load metadata
        if DATA_CONFIG['metadata_file'].exists():
            metadata = data_processor.load_metadata()
            print(f"‚úÖ Metadata loaded: {len(metadata)} records")
        else:
            print("‚ö†Ô∏è  File metadata.csv kh√¥ng t·ªìn t·∫°i (c·∫ßn t·∫°o)")
        
        # Test validate data
        integrity = data_processor.validate_data_integrity()
        print(f"‚úÖ Data integrity check: {integrity['total_valid']} valid files")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói DataProcessor: {e}")
        return False

def test_face_processor():
    """Test FaceProcessor"""
    print("üîç Ki·ªÉm tra FaceProcessor...")
    
    try:
        face_processor = FaceProcessor()
        print("‚úÖ FaceProcessor kh·ªüi t·∫°o th√†nh c√¥ng")
        
        # Test DeepFace import
        try:
            from deepface import DeepFace
            print("‚úÖ DeepFace import OK")
        except ImportError:
            print("‚ùå DeepFace ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói FaceProcessor: {e}")
        return False

def test_image_processor():
    """Test ImageProcessor"""
    print("üîç Ki·ªÉm tra ImageProcessor...")
    
    try:
        image_processor = ImageProcessor()
        print("‚úÖ ImageProcessor kh·ªüi t·∫°o th√†nh c√¥ng")
        
        # Test OpenCV
        import cv2
        print(f"‚úÖ OpenCV version: {cv2.__version__}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói ImageProcessor: {e}")
        return False

def test_pretrained_weights():
    """Test pretrained weights"""
    print("üîç Ki·ªÉm tra pretrained weights...")
    
    weights_path = MODEL_CONFIG['yolov7_weights']
    
    if weights_path.exists():
        print(f"‚úÖ YOLOv7 weights t·ªìn t·∫°i: {weights_path}")
        return True
    else:
        print(f"‚ö†Ô∏è  YOLOv7 weights kh√¥ng t·ªìn t·∫°i: {weights_path}")
        print("   Ch·∫°y: wget -O models/pretrained/yolov7.pt https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7.pt")
        return False

def test_training_ready():
    """Test s·∫µn s√†ng cho training"""
    print("üîç Ki·ªÉm tra s·∫µn s√†ng cho training...")
    
    # Ki·ªÉm tra dataset
    if DATA_CONFIG['raw_images_dir'].exists():
        image_files = list(DATA_CONFIG['raw_images_dir'].glob('*.jpg')) + \
                     list(DATA_CONFIG['raw_images_dir'].glob('*.png'))
        print(f"‚úÖ Raw images: {len(image_files)} files")
    else:
        print("‚ö†Ô∏è  Th∆∞ m·ª•c raw_images kh√¥ng t·ªìn t·∫°i")
    
    # Ki·ªÉm tra metadata
    if DATA_CONFIG['metadata_file'].exists():
        print("‚úÖ Metadata file t·ªìn t·∫°i")
    else:
        print("‚ö†Ô∏è  Metadata file kh√¥ng t·ªìn t·∫°i")
    
    return True

def main():
    """Main test function"""
    print("üöÄ B·∫Øt ƒë·∫ßu test h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t")
    print("=" * 50)
    
    tests = [
        ("YOLOv7 Availability", test_yolov7_availability),
        ("System Config", test_config),
        ("DataProcessor", test_data_processor),
        ("FaceProcessor", test_face_processor),
        ("ImageProcessor", test_image_processor),
        ("Pretrained Weights", test_pretrained_weights),
        ("Training Ready", test_training_ready),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 30)
        
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå L·ªói trong test {test_name}: {e}")
            results.append((test_name, False))
    
    # T·ªïng k·∫øt
    print("\n" + "=" * 50)
    print("üìä K·∫æT QU·∫¢ TEST")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ T·ªïng k·∫øt: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ T·∫•t c·∫£ tests ƒë·ªÅu PASS! H·ªá th·ªëng s·∫µn s√†ng s·ª≠ d·ª•ng.")
    else:
        print("‚ö†Ô∏è  M·ªôt s·ªë tests FAIL. Vui l√≤ng ki·ªÉm tra v√† s·ª≠a l·ªói.")
    
    return passed == total

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 