"""
Script test t·∫•t c·∫£ c√°c models c·ªßa DeepFace ƒë·ªÉ so s√°nh hi·ªáu su·∫•t
"""

import sys
from pathlib import Path
import logging
import time
import numpy as np

# Th√™m th∆∞ m·ª•c g·ªëc v√†o Python path
sys.path.append(str(Path(__file__).parent))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_deepface_models():
    """Test t·∫•t c·∫£ c√°c models c·ªßa DeepFace"""
    try:
        from deepface import DeepFace
        import numpy as np
        
        logger.info("‚úÖ DeepFace import th√†nh c√¥ng")
        
        # T·∫°o ·∫£nh test
        test_image = np.ones((160, 160, 3), dtype=np.uint8) * 128
        
        # Danh s√°ch c√°c models ƒë·ªÉ test
        models = [
            'VGG-Face',
            'Facenet', 
            'Facenet512',
            'OpenFace',
            'DeepID',
            'ArcFace',
            'SFace'
        ]
        
        results = {}
        
        for model_name in models:
            try:
                logger.info(f"üß™ Testing model: {model_name}")
                start_time = time.time()
                
                embedding = DeepFace.represent(
                    img_path=test_image,
                    model_name=model_name,
                    enforce_detection=False
                )
                
                end_time = time.time()
                processing_time = end_time - start_time
                
                if isinstance(embedding, list) and len(embedding) > 0:
                    embedding_vector = embedding[0]['embedding']
                    embedding_dim = len(embedding_vector)
                    
                    results[model_name] = {
                        'status': '‚úÖ Th√†nh c√¥ng',
                        'dimension': embedding_dim,
                        'time': processing_time,
                        'embedding_sample': embedding_vector[:5]  # 5 gi√° tr·ªã ƒë·∫ßu ti√™n
                    }
                    
                    logger.info(f"‚úÖ {model_name}: {embedding_dim} chi·ªÅu, {processing_time:.3f}s")
                else:
                    results[model_name] = {
                        'status': '‚ùå L·ªói',
                        'error': 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c embedding h·ª£p l·ªá'
                    }
                    logger.error(f"‚ùå {model_name}: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c embedding h·ª£p l·ªá")
                    
            except Exception as e:
                results[model_name] = {
                    'status': '‚ùå L·ªói',
                    'error': str(e)
                }
                logger.error(f"‚ùå {model_name}: {e}")
        
        # In k·∫øt qu·∫£ t·ªïng h·ª£p
        logger.info("\n" + "="*60)
        logger.info("üìä K·∫æT QU·∫¢ TEST T·∫§T C·∫¢ MODELS")
        logger.info("="*60)
        
        for model_name, result in results.items():
            if result['status'] == '‚úÖ Th√†nh c√¥ng':
                logger.info(f"{model_name:12} | {result['dimension']:3} chi·ªÅu | {result['time']:6.3f}s | ‚úÖ")
            else:
                logger.error(f"{model_name:12} | {result['error']}")
        
        # So s√°nh hi·ªáu su·∫•t
        successful_models = {k: v for k, v in results.items() if v['status'] == '‚úÖ Th√†nh c√¥ng'}
        
        if successful_models:
            logger.info("\n" + "="*60)
            logger.info("üèÜ SO S√ÅNH HI·ªÜU SU·∫§T")
            logger.info("="*60)
            
            # S·∫Øp x·∫øp theo th·ªùi gian x·ª≠ l√Ω
            sorted_by_time = sorted(successful_models.items(), key=lambda x: x[1]['time'])
            
            for i, (model_name, result) in enumerate(sorted_by_time, 1):
                logger.info(f"{i}. {model_name:12} | {result['time']:6.3f}s | {result['dimension']:3} chi·ªÅu")
            
            # Khuy·∫øn ngh·ªã model t·ªët nh·∫•t
            best_model = sorted_by_time[0][0]
            logger.info(f"\nüéØ KHUY·∫æN NGH·ªä: S·ª≠ d·ª•ng {best_model} (nhanh nh·∫•t)")
            
            # N·∫øu Facenet512 c√≥ s·∫µn v√† kh√¥ng qu√° ch·∫≠m, khuy·∫øn ngh·ªã s·ª≠ d·ª•ng
            if 'Facenet512' in successful_models:
                facenet512_time = successful_models['Facenet512']['time']
                if facenet512_time < 1.0:  # D∆∞·ªõi 1 gi√¢y
                    logger.info(f"üí° Facenet512 ({facenet512_time:.3f}s) l√† l·ª±a ch·ªçn t·ªët cho ƒë·ªô ch√≠nh x√°c cao")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi test DeepFace models: {e}")
        return False

def test_model_compatibility():
    """Test t√≠nh t∆∞∆°ng th√≠ch c·ªßa c√°c models"""
    logger.info("\nüîß Ki·ªÉm tra t√≠nh t∆∞∆°ng th√≠ch...")
    
    try:
        from deepface import DeepFace
        import numpy as np
        
        # T·∫°o 2 ·∫£nh test kh√°c nhau
        img1 = np.ones((160, 160, 3), dtype=np.uint8) * 100
        img2 = np.ones((160, 160, 3), dtype=np.uint8) * 150
        
        # Test v·ªõi Facenet512 (model ƒë∆∞·ª£c khuy·∫øn ngh·ªã)
        logger.info("üß™ Test t√≠nh t∆∞∆°ng th√≠ch v·ªõi Facenet512...")
        
        embedding1 = DeepFace.represent(
            img_path=img1,
            model_name='Facenet512',
            enforce_detection=False
        )
        
        embedding2 = DeepFace.represent(
            img_path=img2,
            model_name='Facenet512',
            enforce_detection=False
        )
        
        if isinstance(embedding1, list) and isinstance(embedding2, list):
            vec1 = np.array(embedding1[0]['embedding'])
            vec2 = np.array(embedding2[0]['embedding'])
            
            # T√≠nh cosine similarity
            from sklearn.metrics.pairwise import cosine_similarity
            similarity = cosine_similarity(vec1.reshape(1, -1), vec2.reshape(1, -1))[0][0]
            
            logger.info(f"‚úÖ Facenet512 ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
            logger.info(f"üìä Similarity gi·ªØa 2 ·∫£nh test: {similarity:.4f}")
            
            return True
        else:
            logger.error("‚ùå Kh√¥ng th·ªÉ tr√≠ch xu·∫•t embeddings")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi test t√≠nh t∆∞∆°ng th√≠ch: {e}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ B·∫Øt ƒë·∫ßu test t·∫•t c·∫£ models c·ªßa DeepFace...")
    
    # Test t·∫•t c·∫£ models
    success1 = test_deepface_models()
    
    # Test t√≠nh t∆∞∆°ng th√≠ch
    success2 = test_model_compatibility()
    
    if success1 and success2:
        logger.info("\nüéâ T·∫•t c·∫£ tests ƒë·ªÅu th√†nh c√¥ng!")
        logger.info("üìù H·ªá th·ªëng s·∫µn s√†ng s·ª≠ d·ª•ng Facenet512 model")
    else:
        logger.error("\n‚ùå C√≥ l·ªói trong qu√° tr√¨nh test")
        sys.exit(1) 